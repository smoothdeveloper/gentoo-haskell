commit 7b761ba8d9c62ea175036ad7f8aae534b9d7e944
Author: Alexander Vershilov <alexander.vershilov@gmail.com>
Date:   Tue Feb 11 13:34:36 2014 +0400

    Introduce Utils module with helper functions.

diff --git a/src/System/ZMQ4/Utils.hs b/src/System/ZMQ4/Utils.hs
new file mode 100644
index 0000000..7eb8745
--- /dev/null
+++ b/src/System/ZMQ4/Utils.hs
@@ -0,0 +1,36 @@
+-- |
+--
+-- This module exposes helpers
+module System.ZMQ4.Utils
+  ( bindFromRangeRandom
+  )
+  where
+
+import Control.Monad.Catch
+import System.Random ( randomRIO )
+import Text.Printf
+
+import System.ZMQ4.Monadic
+import System.ZMQ4.Error
+
+-- | Bind socket to the random port in a given range.
+bindFromRangeRandom :: Socket z t
+                    -> String -- ^ Address
+                    -> Int    -- ^ Min port
+                    -> Int    -- ^ Max port
+                    -> Int    -- ^ Max tries
+                    -> ZMQ z Int
+bindFromRangeRandom sock addr mI mA tr = go tr
+    where
+      go 0 = throwM $ ZMQError (-1)
+                               "bindFromRangeRandom"
+                               "Couldn't bind socket to random port"
+      go x = do
+        port   <- liftIO $ randomRIO (mI,mA)
+        result <- try $ bind sock (printf "%s:%i" addr port)
+        case result of
+            Left e@(ZMQError i _ _)
+              | i == -1 -> go (x - 1)
+              | otherwise -> throwM e
+            Right () -> return port
+
diff --git a/tests/System/ZMQ4/Test/Properties.hs b/tests/System/ZMQ4/Test/Properties.hs
index cc3cc63..7b4ac51 100644
--- a/tests/System/ZMQ4/Test/Properties.hs
+++ b/tests/System/ZMQ4/Test/Properties.hs
@@ -17,6 +17,7 @@ import Data.Restricted
 import Data.Maybe (fromJust)
 import Data.ByteString (ByteString)
 import System.ZMQ4.Monadic
+import System.ZMQ4.Utils
 import System.Posix.Types (Fd(..))
 import qualified Data.ByteString as SB
 import qualified Data.ByteString.Char8 as CB
@@ -51,7 +52,11 @@ tests = do
           [ ("connect disconnect ", property $ prop_connect_disconnect x) |
             x <- [ (AnySocket Rep, AnySocket Req)
                  , (AnySocket Router, AnySocket Req)
-                 , (AnySocket Pull, AnySocket Push)]]
+                 , (AnySocket Pull, AnySocket Push)]
+          ] ++
+          [ ("bind random port", property $ prop_random_port x) |
+            x <- [ AnySocket Rep, AnySocket Router, AnySocket Pull, AnySocket Dealer]
+          ]
           )
 
       quickBatch' ("0MQ Messages"
@@ -140,6 +145,14 @@ prop_connect_disconnect (AnySocket t0, AnySocket t) = monadicIO $ run $
         connect s "inproc://endpoint"
         disconnect s "inproc://endpoint"
 
+prop_random_port :: AnySocket -> Property
+prop_random_port (AnySocket t) = monadicIO $ 
+    assert =<< (run . runZMQ) (do
+      s <- socket t
+      p1 <- bindFromRangeRandom s "tcp://*" 2001 20000 10
+      p2 <- bindFromRangeRandom s "tcp://*" 2001 20000 10
+      return (p1 /= p2))
+
 instance Arbitrary ByteString where
     arbitrary = CB.pack . filter (/= '\0') <$> arbitrary
 
diff --git a/zeromq4-haskell.cabal b/zeromq4-haskell.cabal
index 25015d9..c54252f 100644
--- a/zeromq4-haskell.cabal
+++ b/zeromq4-haskell.cabal
@@ -42,6 +42,7 @@ library
     exposed-modules:
         System.ZMQ4
         System.ZMQ4.Monadic
+        System.ZMQ4.Utils
         Data.Restricted
 
     other-modules:
@@ -59,6 +60,7 @@ library
         , exceptions                >= 0.3
         , semigroups                >= 0.8
         , transformers              >= 0.3
+        , random                    >= 1.0
 
     if os(freebsd)
         extra-libraries:  zmq, pthread
